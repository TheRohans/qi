#!/bin/sh
#
# qi configure script, forked from...
# qemacs configure script (c) 2002 Fabrice Bellard
#
# set temporary file name
if test ! -z "$TMPDIR" ; then
    TMPDIR1="${TMPDIR}"
elif test ! -z "$TEMPDIR" ; then
    TMPDIR1="${TEMPDIR}"
else
    TMPDIR1="/tmp"
fi

TMPC="${TMPDIR1}/qi-conf-${RANDOM}-$$-${RANDOM}.c"
TMPO="${TMPDIR1}/qi-conf-${RANDOM}-$$-${RANDOM}.o"
TMPS="${TMPDIR1}/qi-conf-${RANDOM}-$$-${RANDOM}.S"
TMPH="${TMPDIR1}/qi-conf-${RANDOM}-$$-${RANDOM}.h"

# default parameters
prefix="/usr/local"
cross_prefix=""
cc="gcc"
host_cc="gcc"
ar="ar"
make="make"
strip="strip"
cpu=`uname -m`
case "$cpu" in
  i386|i486|i586|i686|i86pc|BePC)
    cpu="x86"
  ;;
  armv4l)
    cpu="armv4l"
  ;;
  alpha)
    cpu="alpha"
  ;;
  *)
    cpu="unknown"
  ;;
esac
gprof="no"
win32="no"
cygwin="no"
lshared="no"
extralibs="-lm"
simpleidct="yes"
bigendian="no"
debug="no"
tiny="no"
exe=""
beta="no"

# OS specific
targetos=`uname -s`
case $targetos in
  BeOS)
    prefix="/boot/home/config"
    # helps building libavcodec
    CFLAGS="-O2 -DPIC"
    # no need for libm, but the inet stuff
    # Check for BONE
    if (echo $BEINCLUDES|grep 'headers/be/bone' >/dev/null); then
        extralibs="-lbind -lsocket"
    else
        echo "Not sure building for net_server will succeed... good luck."
    extralibs="-lsocket"
    fi ;;
  BSD/OS|FreeBSD)
    extralibs="-lpoll -lgnugetopt -lm"
    make="gmake"
    cc="clang"
    host_cc="clang"
    ;;
  CYGWIN*)
    cygwin="yes"
    ;;
  *) ;;
esac

# find source path
# XXX: we assume an absolute path is given when launching configure, 
# except in './configure' case.
source_path=${0%configure}
source_path=${source_path%/}
source_path_used="yes"
if test -z "$source_path" -o "$source_path" = "." ; then
    source_path=`pwd`
    source_path_used="no"
fi

if test ! -f /usr/include/png.h ; then
    png="no"
fi

for opt do
  case "$opt" in
  --prefix=*) prefix=`echo $opt | cut -d '=' -f 2`
  ;;
  --source-path=*) source_path=`echo $opt | cut -d '=' -f 2`
  ;;
  --cross-prefix=*) cross_prefix=`echo $opt | cut -d '=' -f 2`
  ;;
  --cc=*) cc=`echo $opt | cut -d '=' -f 2`
  ;;
  --make=*) make=`echo $opt | cut -d '=' -f 2`
  ;;
  --extra-cflags=*) CFLAGS="${opt#--extra-cflags=}"
  ;;
  --extra-ldflags=*) LDFLAGS="${opt#--extra-ldflags=}"
  ;;
  --extra-libs=*) extralibs=${opt#--extra-libs=}
  ;;
  --cpu=*) cpu=`echo $opt | cut -d '=' -f 2`
  ;;
  --enable-gprof) gprof="yes"
  ;;
  --disable-network) network="no"
  ;;
  --enable-debug) debug="yes"
  ;;
  --enable-tiny) tiny="yes"
  ;;
  --enable-beta) beta="yes"
  ;;
  esac
done

# Checking for CFLAGS
if test -z "$CFLAGS"; then
    CFLAGS="-O2"
fi

# endianness : guess with cpu type. Should also use prefix
if test "$cpu" = "powerpc"; then
    bigendian="yes"
fi

cc="${cross_prefix}${cc}"
ar="${cross_prefix}${ar}"
strip="${cross_prefix}${strip}"

# ---
# check availability of some header files

cat > $TMPC << EOF
#include <malloc.h>
int main( void ) { return 0; }
EOF

_memalign=no
_malloc_h=no
if $cc -o $TMPO $TMPC 2> /dev/null ; then
    _malloc_h=yes
    _memalign=yes
    # check for memalign - atmos
    cat > $TMPC << EOF
#include <malloc.h>
int main (void) {
  char *string = NULL;
  string = memalign(64, sizeof(char));
  return 0;
}
EOF
    $cc -o $TMPO $TMPC 2> /dev/null || _memalign=no
fi

#if test -z "$CFLAGS"; then
#    CFLAGS="-O2"
#fi


# check gcc version
cat > $TMPC <<EOF
int main(void) {
#if __GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 2)
return 0;
#else
#error gcc < 3.2
#endif
}
EOF

gcc_major="2"
if $cc -o $TMPO $TMPC 2> /dev/null ; then
   gcc_major="3"
fi

if test x"$1" = x"-h" -o x"$1" = x"--help" ; then
cat << EOF

Usage: configure [options]
Options: [defaults in brackets after descriptions]

EOF
echo "Standard options:"
echo "  --help                   print this message"
echo "  --prefix=PREFIX          install in PREFIX [$prefix]"
echo "  --enable-debug           build with debug stuff for gdb"
echo "  --enable-tiny            build a very small version, no color, no extra modes or features, etc"
echo "  --enable-beta            turn on features that may not be ready yet. (wont work with tiny)"
echo ""
echo "Advanced options (experts only):"
echo "  --source-path=PATH       path of source code [$source_path]"
echo "  --cross-prefix=PREFIX    use PREFIX for compile tools [$cross_prefix]"
echo "  --cc=CC                  use C compiler CC [$cc]"
echo "  --make=MAKE              use specified make [$make]"
echo ""
exit 1
fi

echo "--------------------"
echo "Install prefix   $prefix"
echo "Source path      $source_path"
echo "C compiler       $cc"
echo "Debug            $debug"
echo "Beta             $beta"
echo "Tiny build       $tiny"
echo "--------------------"
echo "Creating config.mak and config.h"

MAK_FILE=src/config.mak
H_FILE=src/config.h

echo "# Automatically generated by configure - do not modify" > ${MAK_FILE}
echo "/* Automatically generated by configure - do not modify */" > $TMPH

echo "PREFIX=$prefix" >> ${MAK_FILE}
echo "#define CONFIG_QE_PREFIX \"$prefix\"" >> $TMPH
echo "MAKE?=$make" >> ${MAK_FILE}
echo "CC?=$cc" >> ${MAK_FILE}
echo "GCC_MAJOR?=$gcc_major" >> ${MAK_FILE}
echo "HOST_CC?=$host_cc" >> ${MAK_FILE}
echo "AR?=$ar" >> ${MAK_FILE}
#doesn't work on OS X
#echo "STRIP=$strip -s -R .comment -R .note" >> config.mak
echo "CFLAGS=$CFLAGS" >> ${MAK_FILE}
echo "LDFLAGS=$LDFLAGS" >> ${MAK_FILE}
echo "EXE=$exe" >> ${MAK_FILE}

if test "$cpu" = "x86" ; then
  echo "TARGET_ARCH_X86=yes" >> ${MAK_FILE}
  echo "#define ARCH_X86 1" >> $TMPH
elif test "$cpu" = "armv4l" ; then
  echo "TARGET_ARCH_ARMV4L=yes" >> ${MAK_FILE}
  echo "#define ARCH_ARMV4L 1" >> $TMPH
elif test "$cpu" = "alpha" ; then
  echo "TARGET_ARCH_ALPHA=yes" >> ${MAK_FILE}
  echo "#define ARCH_ALPHA 1" >> $TMPH
elif test "$cpu" = "powerpc" ; then
  echo "TARGET_ARCH_POWERPC=yes" >> ${MAK_FILE}
  echo "#define ARCH_POWERPC 1" >> $TMPH
fi

if test "$bigendian" = "yes" ; then
  echo "WORDS_BIGENDIAN=yes" >> ${MAK_FILE}
  echo "#define WORDS_BIGENDIAN 1" >> $TMPH
fi

if test "$gprof" = "yes" ; then
  echo "TARGET_GPROF=yes" >> ${MAK_FILE}
  echo "#define HAVE_GPROF 1" >> $TMPH
fi

if test "$lshared" = "yes" ; then
  echo "BUILD_SHARED=yes" >> ${MAK_FILE}
  echo "PIC=-fPIC" >> ${MAK_FILE}
fi

echo "EXTRALIBS=$extralibs" >> ${MAK_FILE}
echo -n "VERSION=" >> ${MAK_FILE}
echo -n `git rev-parse --short --verify HEAD` >> ${MAK_FILE}
echo "" >> ${MAK_FILE}
echo -n "#define QE_VERSION \"" >> $TMPH
echo -n `git rev-parse --short --verify HEAD` >> $TMPH
echo "\"" >> $TMPH

if test "$debug" = "yes" ; then
  echo "#define CONFIG_DEBUG 1" >> $TMPH
  echo "CONFIG_DEBUG=yes" >> ${MAK_FILE}
fi

if test "$tiny" = "yes" ; then
  echo "#define CONFIG_TINY 1" >> $TMPH
  echo "CONFIG_TINY=yes" >> ${MAK_FILE}
fi

if test "$beta" = "yes" ; then
  echo "#define CONFIG_BETA 1" >> $TMPH
  echo "CONFIG_BETA=yes" >> ${MAK_FILE}
fi

# build tree in object directory if source path is different from current one
if test "$source_path_used" = "yes" ; then
    DIRS="tests"
    FILES="Makefile tests/Makefile"
    for dir in $DIRS ; do
            mkdir -p $dir
    done
    for f in $FILES ; do
        ln -sf $source_path/$f $f
    done
fi
echo "SRC_PATH=$source_path" >> ${MAK_FILE}

diff $TMPH ${H_FILE} >/dev/null 2>&1
if test $? -ne 0 ; then
    mv -f $TMPH ${H_FILE}
else
    echo "config.h is unchanged"
fi

rm -f $TMPC $TMPO $TMPS $TMPH $TMPE

